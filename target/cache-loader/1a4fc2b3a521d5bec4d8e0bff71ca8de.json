{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/logs/logs.service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/logs/logs.service.ts","mtime":1564500078598},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst Observable_1 = require(\"rxjs/Observable\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet LogsService = class LogsService {\n    constructor(http) {\n        this.http = http;\n    }\n    changeLevel(name, configuredLevel) {\n        return this.http.post(app_constants_1.SERVER_API_URL + 'management/loggers/' + name, { configuredLevel }, { observe: 'response' });\n    }\n    changeInstanceLevel(instances, name, configuredLevel) {\n        const changeInstanceLevelResponses = [];\n        for (let i = 0; i < instances.length; i++) {\n            if (instances[i] && instances[i].prefix && instances[i].prefix.length > 0) {\n                changeInstanceLevelResponses.push(this.http.post(instances[i].prefix + '/management/loggers/' + name, { configuredLevel }, { observe: 'response' }));\n            }\n            else {\n                changeInstanceLevelResponses.push(this.changeLevel(name, configuredLevel));\n            }\n        }\n        return Observable_1.Observable.forkJoin(changeInstanceLevelResponses);\n    }\n    findAll() {\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/loggers', { observe: 'response' });\n    }\n    findInstanceAll(instance) {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.http.get(instance.prefix + '/management/loggers', { observe: 'response' });\n        }\n        return this.findAll();\n    }\n};\nLogsService = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], LogsService);\nexports.LogsService = LogsService;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/logs/logs.service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/logs/logs.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAAgE;AAChE,gDAA6C;AAE7C,qDAAmD;AAKnD,IAAa,WAAW,GAAxB,MAAa,WAAW;IACpB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,WAAW,CAAC,IAAY,EAAE,eAAuB;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8BAAc,GAAG,qBAAqB,GAAG,IAAI,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACvH,CAAC;IAED,mBAAmB,CAAC,SAAkB,EAAE,IAAY,EAAE,eAAuB;QACzE,MAAM,4BAA4B,GAAoC,EAAE,CAAC;QACzE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzE,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,sBAAsB,GAAG,IAAI,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;aACtJ;iBAAM;gBACL,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;aAC5E;SACF;QAED,OAAO,uBAAU,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC;IAC7D,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,8BAAc,GAAG,oBAAoB,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC9F,CAAC;IAED,eAAe,CAAC,QAAe;QAC3B,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3D,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,QAAQ,CAAC,MAAM,GAAG,qBAAqB,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;SAC/F;QACD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;CACJ,CAAA;AA9BY,WAAW;IADvB,iBAAU,EAAE;iEAEiB,iBAAU,oBAAV,iBAAU;GAD3B,WAAW,CA8BvB;AA9BY,kCAAW","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { Log } from './log.model';\nimport { Route } from 'app/shared';\n\n@Injectable()\nexport class LogsService {\n    constructor(private http: HttpClient) {}\n\n    changeLevel(name: string, configuredLevel: string): Observable<HttpResponse<any>> {\n        return this.http.post(SERVER_API_URL + 'management/loggers/' + name, { configuredLevel }, { observe: 'response' });\n    }\n\n    changeInstanceLevel(instances: Route[], name: string, configuredLevel: string): Observable<any> {\n        const changeInstanceLevelResponses: Observable<HttpResponse<any>>[] = [];\n        for (let i = 0; i < instances.length; i++) {\n          if (instances[i] && instances[i].prefix && instances[i].prefix.length > 0) {\n            changeInstanceLevelResponses.push(this.http.post(instances[i].prefix + '/management/loggers/' + name, { configuredLevel }, { observe: 'response' }));\n          } else {\n            changeInstanceLevelResponses.push(this.changeLevel(name, configuredLevel));\n          }\n        }\n\n        return Observable.forkJoin(changeInstanceLevelResponses);\n    }\n\n    findAll(): Observable<HttpResponse<any>> {\n        return this.http.get<any>(SERVER_API_URL + 'management/loggers', { observe: 'response' });\n    }\n\n    findInstanceAll(instance: Route): Observable<HttpResponse<any>> {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.http.get<any>(instance.prefix + '/management/loggers', { observe: 'response' });\n        }\n        return this.findAll();\n    }\n}\n"]}]}