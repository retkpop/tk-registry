{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/auth-jwt.service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/auth-jwt.service.ts","mtime":1564500078604},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst Observable_1 = require(\"rxjs/Observable\");\nconst ngx_webstorage_1 = require(\"ngx-webstorage\");\nlet AuthServerProvider = class AuthServerProvider {\n    constructor(http, $localStorage, $sessionStorage) {\n        this.http = http;\n        this.$localStorage = $localStorage;\n        this.$sessionStorage = $sessionStorage;\n    }\n    getToken() {\n        return this.$localStorage.retrieve('authenticationToken') || this.$sessionStorage.retrieve('authenticationToken');\n    }\n    login(credentials) {\n        const data = {\n            username: credentials.username,\n            password: credentials.password,\n            rememberMe: credentials.rememberMe\n        };\n        return this.http.post('api/authenticate', data, { observe: 'response' }).map(authenticateSuccess.bind(this));\n        function authenticateSuccess(resp) {\n            const bearerToken = resp.headers.get('Authorization');\n            if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {\n                const jwt = bearerToken.slice(7, bearerToken.length);\n                this.storeAuthenticationToken(jwt, credentials.rememberMe);\n                return jwt;\n            }\n        }\n    }\n    loginWithToken(jwt, rememberMe) {\n        if (jwt) {\n            this.storeAuthenticationToken(jwt, rememberMe);\n            return Promise.resolve(jwt);\n        }\n        else {\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\n        }\n    }\n    storeAuthenticationToken(jwt, rememberMe) {\n        if (rememberMe) {\n            this.$localStorage.store('authenticationToken', jwt);\n        }\n        else {\n            this.$sessionStorage.store('authenticationToken', jwt);\n        }\n    }\n    logout() {\n        return new Observable_1.Observable(observer => {\n            this.$localStorage.clear('authenticationToken');\n            this.$sessionStorage.clear('authenticationToken');\n            observer.complete();\n        });\n    }\n};\nAuthServerProvider = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object, typeof (_b = typeof ngx_webstorage_1.LocalStorageService !== \"undefined\" && ngx_webstorage_1.LocalStorageService) === \"function\" ? _b : Object, typeof (_c = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _c : Object])\n], AuthServerProvider);\nexports.AuthServerProvider = AuthServerProvider;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/auth-jwt.service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/auth-jwt.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAAkD;AAClD,gDAA6C;AAC7C,mDAA4E;AAG5E,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC3B,YAAoB,IAAgB,EAAU,aAAkC,EAAU,eAAsC;QAA5G,SAAI,GAAJ,IAAI,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAqB;QAAU,oBAAe,GAAf,eAAe,CAAuB;IAAG,CAAC;IAEpI,QAAQ;QACJ,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;IACtH,CAAC;IAED,KAAK,CAAC,WAAW;QACb,MAAM,IAAI,GAAG;YACT,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,UAAU,EAAE,WAAW,CAAC,UAAU;SACrC,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7G,SAAS,mBAAmB,CAAC,IAAI;YAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACtD,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,EAAE;gBACtD,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBACrD,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;gBAC3D,OAAO,GAAG,CAAC;aACd;QACL,CAAC;IACL,CAAC;IAED,cAAc,CAAC,GAAG,EAAE,UAAU;QAC1B,IAAI,GAAG,EAAE;YACL,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAC/C,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SAC/B;aAAM;YACH,OAAO,OAAO,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC,CAAC,qCAAqC;SAClG;IACL,CAAC;IAED,wBAAwB,CAAC,GAAG,EAAE,UAAU;QACpC,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;SACxD;aAAM;YACH,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;SAC1D;IACL,CAAC;IAED,MAAM;QACF,OAAO,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;YAC7B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAChD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAClD,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAA;AAjDY,kBAAkB;IAD9B,iBAAU,EAAE;iEAEiB,iBAAU,oBAAV,iBAAU,oDAAyB,oCAAmB,oBAAnB,oCAAmB,oDAA2B,sCAAqB,oBAArB,sCAAqB;GADvH,kBAAkB,CAiD9B;AAjDY,gDAAkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n\n@Injectable()\nexport class AuthServerProvider {\n    constructor(private http: HttpClient, private $localStorage: LocalStorageService, private $sessionStorage: SessionStorageService) {}\n\n    getToken() {\n        return this.$localStorage.retrieve('authenticationToken') || this.$sessionStorage.retrieve('authenticationToken');\n    }\n\n    login(credentials): Observable<any> {\n        const data = {\n            username: credentials.username,\n            password: credentials.password,\n            rememberMe: credentials.rememberMe\n        };\n        return this.http.post('api/authenticate', data, { observe: 'response' }).map(authenticateSuccess.bind(this));\n\n        function authenticateSuccess(resp) {\n            const bearerToken = resp.headers.get('Authorization');\n            if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {\n                const jwt = bearerToken.slice(7, bearerToken.length);\n                this.storeAuthenticationToken(jwt, credentials.rememberMe);\n                return jwt;\n            }\n        }\n    }\n\n    loginWithToken(jwt, rememberMe) {\n        if (jwt) {\n            this.storeAuthenticationToken(jwt, rememberMe);\n            return Promise.resolve(jwt);\n        } else {\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\n        }\n    }\n\n    storeAuthenticationToken(jwt, rememberMe) {\n        if (rememberMe) {\n            this.$localStorage.store('authenticationToken', jwt);\n        } else {\n            this.$sessionStorage.store('authenticationToken', jwt);\n        }\n    }\n\n    logout(): Observable<any> {\n        return new Observable(observer => {\n            this.$localStorage.clear('authenticationToken');\n            this.$sessionStorage.clear('authenticationToken');\n            observer.complete();\n        });\n    }\n}\n"]}]}