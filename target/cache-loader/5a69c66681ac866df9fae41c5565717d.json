{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/health/health.service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/health/health.service.ts","mtime":1564500078596},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nlet JhiHealthService = class JhiHealthService {\n    constructor(http) {\n        this.http = http;\n        this.separator = '.';\n    }\n    // get the Registry's health\n    checkHealth() {\n        return this.http.get('management/health');\n    }\n    // get the instance's health\n    checkInstanceHealth(instance) {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.http.get(instance.prefix + '/management/health');\n        }\n        return this.checkHealth();\n    }\n    transformHealthData(data) {\n        const response = [];\n        if (data.details !== undefined) {\n            this.flattenHealthData(response, null, data.details);\n        }\n        else {\n            this.flattenHealthData(response, null, data);\n        }\n        return response;\n    }\n    getBaseName(name) {\n        if (name) {\n            const split = name.split('.');\n            return split[0];\n        }\n    }\n    getSubSystemName(name) {\n        if (name) {\n            const split = name.split('.');\n            split.splice(0, 1);\n            const remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    }\n    /* private methods */\n    addHealthObject(result, isLeaf, healthObject, name) {\n        const healthData = {\n            name\n        };\n        const details = {};\n        let hasDetails = false;\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                }\n                else {\n                    if (!this.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            }\n        }\n        // Add the details\n        if (hasDetails) {\n            healthData.details = details;\n        }\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    }\n    flattenHealthData(result, path, data) {\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                if (this.isHealthObject(value)) {\n                    if (this.hasSubSystem(value)) {\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\n                    }\n                    else {\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    getModuleName(path, name) {\n        let result;\n        if (path && name) {\n            result = path + this.separator + name;\n        }\n        else if (path) {\n            result = path;\n        }\n        else if (name) {\n            result = name;\n        }\n        else {\n            result = '';\n        }\n        return result;\n    }\n    hasSubSystem(healthObject) {\n        let result = false;\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (value && value.status) {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n    isHealthObject(healthObject) {\n        let result = false;\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                if (key === 'status') {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n};\nJhiHealthService = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], JhiHealthService);\nexports.JhiHealthService = JhiHealthService;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/health/health.service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/health/health.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Route } from 'app/shared';\n\n@Injectable()\nexport class JhiHealthService {\n    separator: string;\n\n    constructor(private http: HttpClient) {\n        this.separator = '.';\n    }\n\n    // get the Registry's health\n    checkHealth(): Observable<any> {\n        return this.http.get('management/health');\n    }\n\n    // get the instance's health\n    checkInstanceHealth(instance: Route): Observable<any> {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.http.get(instance.prefix + '/management/health');\n        }\n        return this.checkHealth();\n    }\n\n    transformHealthData(data): any {\n        const response = [];\n        if (data.details !== undefined) {\n            this.flattenHealthData(response, null, data.details);\n        } else {\n            this.flattenHealthData(response, null, data);\n        }\n        return response;\n    }\n\n    getBaseName(name): string {\n        if (name) {\n            const split = name.split('.');\n            return split[0];\n        }\n    }\n\n    getSubSystemName(name): string {\n        if (name) {\n            const split = name.split('.');\n            split.splice(0, 1);\n            const remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    }\n\n    /* private methods */\n    private addHealthObject(result, isLeaf, healthObject, name): any {\n        const healthData: any = {\n            name\n        };\n\n        const details = {};\n        let hasDetails = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!this.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            }\n        }\n\n        // Add the details\n        if (hasDetails) {\n            healthData.details = details;\n        }\n\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    }\n\n    private flattenHealthData(result, path, data): any {\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                if (this.isHealthObject(value)) {\n                    if (this.hasSubSystem(value)) {\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\n                    } else {\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    private getModuleName(path, name): string {\n        let result;\n        if (path && name) {\n            result = path + this.separator + name;\n        } else if (path) {\n            result = path;\n        } else if (name) {\n            result = name;\n        } else {\n            result = '';\n        }\n        return result;\n    }\n\n    private hasSubSystem(healthObject): boolean {\n        let result = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (value && value.status) {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    private isHealthObject(healthObject): boolean {\n        let result = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                if (key === 'status') {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n}\n"]}]}