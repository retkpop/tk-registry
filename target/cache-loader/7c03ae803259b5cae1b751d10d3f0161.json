{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/routes/routes.service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/routes/routes.service.ts","mtime":1564500078630},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst Subject_1 = require(\"rxjs/Subject\");\nconst ngx_webstorage_1 = require(\"ngx-webstorage\");\nlet JhiRoutesService = class JhiRoutesService {\n    constructor(http, sessionStorage) {\n        this.http = http;\n        this.sessionStorage = sessionStorage;\n        // Observable sources\n        this.routeChangedSource = new Subject_1.Subject();\n        this.routesChangedSource = new Subject_1.Subject();\n        this.routeDownSource = new Subject_1.Subject();\n        this.routeReloadSource = new Subject_1.Subject();\n        this.routeChanged$ = this.routeChangedSource.asObservable();\n        this.routesChanged$ = this.routesChangedSource.asObservable();\n        this.routeDown$ = this.routeDownSource.asObservable();\n        this.routeReload$ = this.routeReloadSource.asObservable();\n    }\n    findAll() {\n        return this.http.get('/api/routes');\n    }\n    routeChange(route) {\n        this.routeChangedSource.next(route);\n    }\n    routesChange(routes) {\n        this.routesChangedSource.next(routes);\n    }\n    reloadRoutes() {\n        this.routeReloadSource.next(true);\n    }\n    routeDown(route) {\n        this.routeDownSource.next(route);\n    }\n    getSelectedInstance() {\n        return this.sessionStorage.retrieve('instanceId');\n    }\n    storeSelectedInstance(instance) {\n        this.sessionStorage.store('instanceId', instance);\n    }\n};\nJhiRoutesService = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object, typeof (_b = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _b : Object])\n], JhiRoutesService);\nexports.JhiRoutesService = JhiRoutesService;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/routes/routes.service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/routes/routes.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAAkD;AAElD,0CAAuC;AAEvC,mDAAuD;AAGvD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAWzB,YAAoB,IAAgB,EAAU,cAAqC;QAA/D,SAAI,GAAJ,IAAI,CAAY;QAAU,mBAAc,GAAd,cAAc,CAAuB;QAVnF,qBAAqB;QACb,uBAAkB,GAAG,IAAI,iBAAO,EAAS,CAAC;QAC1C,wBAAmB,GAAG,IAAI,iBAAO,EAAW,CAAC;QAC7C,oBAAe,GAAG,IAAI,iBAAO,EAAS,CAAC;QACvC,sBAAiB,GAAG,IAAI,iBAAO,EAAW,CAAC;QAO/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QAC5D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;QAC9D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACtD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAC9D,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,aAAa,CAAC,CAAC;IACjD,CAAC;IAED,WAAW,CAAC,KAAY;QACpB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,YAAY,CAAC,MAAe;QAC1B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,YAAY;QACR,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,SAAS,CAAC,KAAY;QAClB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,mBAAmB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACtD,CAAC;IAED,qBAAqB,CAAC,QAAQ;QAC1B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;CACJ,CAAA;AA7CY,gBAAgB;IAD5B,iBAAU,EAAE;iEAYiB,iBAAU,oBAAV,iBAAU,oDAA0B,sCAAqB,oBAArB,sCAAqB;GAX1E,gBAAgB,CA6C5B;AA7CY,4CAAgB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Route } from './route.model';\nimport { SessionStorageService } from 'ngx-webstorage';\n\n@Injectable()\nexport class JhiRoutesService {\n    // Observable sources\n    private routeChangedSource = new Subject<Route>();\n    private routesChangedSource = new Subject<Route[]>();\n    private routeDownSource = new Subject<Route>();\n    private routeReloadSource = new Subject<boolean>();\n    routeChanged$: Observable<Route>;\n    routesChanged$: Observable<Route[]>;\n    routeDown$: Observable<Route>;\n    routeReload$: Observable<boolean>;\n\n    constructor(private http: HttpClient, private sessionStorage: SessionStorageService) {\n        this.routeChanged$ = this.routeChangedSource.asObservable();\n        this.routesChanged$ = this.routesChangedSource.asObservable();\n        this.routeDown$ = this.routeDownSource.asObservable();\n        this.routeReload$ = this.routeReloadSource.asObservable();\n    }\n\n    findAll(): Observable<Route[]> {\n        return this.http.get<Route[]>('/api/routes');\n    }\n\n    routeChange(route: Route) {\n        this.routeChangedSource.next(route);\n    }\n\n    routesChange(routes: Route[]) {\n      this.routesChangedSource.next(routes);\n    }\n\n    reloadRoutes() {\n        this.routeReloadSource.next(true);\n    }\n\n    routeDown(route: Route) {\n        this.routeDownSource.next(route);\n    }\n\n    getSelectedInstance() {\n        return this.sessionStorage.retrieve('instanceId');\n    }\n\n    storeSelectedInstance(instance) {\n        this.sessionStorage.store('instanceId', instance);\n    }\n}\n"]}]}