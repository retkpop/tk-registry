{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/pipe/group-by.pipe.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/pipe/group-by.pipe.ts","mtime":1564500078627},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nlet GroupByPipe = class GroupByPipe {\n    transform(collection, term) {\n        const newValue = [];\n        collection.forEach(col => {\n            const keyVal = this.deepFind(col, term);\n            const index = newValue.findIndex(myObj => myObj.key === keyVal);\n            if (index >= 0) {\n                newValue[index].value.push(col);\n            }\n            else {\n                newValue.push({ key: keyVal, value: [col] });\n            }\n        });\n        return newValue;\n    }\n    deepFind(obj, path) {\n        const paths = path.toString().split(/[.\\[\\]]/);\n        let current = obj;\n        paths.forEach(onePath => {\n            if (onePath !== '') {\n                if (!current[onePath]) {\n                    return undefined;\n                }\n                else {\n                    current = current[onePath];\n                }\n            }\n        });\n        return current;\n    }\n};\nGroupByPipe = tslib_1.__decorate([\n    core_1.Pipe({\n        name: 'groupBy'\n    })\n], GroupByPipe);\nexports.GroupByPipe = GroupByPipe;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/pipe/group-by.pipe.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/pipe/group-by.pipe.ts"],"names":[],"mappings":";;;AAAA,wCAAoD;AAKpD,IAAa,WAAW,GAAxB,MAAa,WAAW;IACpB,SAAS,CAAC,UAAoB,EAAE,IAAY;QACxC,MAAM,QAAQ,GAAG,EAAE,CAAC;QAEpB,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACrB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACxC,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC;YAChE,IAAI,KAAK,IAAI,CAAC,EAAE;gBACZ,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACnC;iBAAM;gBACH,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;aAChD;QACL,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,QAAQ,CAAC,GAAG,EAAE,IAAI;QACtB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC/C,IAAI,OAAO,GAAG,GAAG,CAAC;QAElB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACpB,IAAI,OAAO,KAAK,EAAE,EAAE;gBAChB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBACnB,OAAO,SAAS,CAAC;iBACpB;qBAAM;oBACH,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;iBAC9B;aACJ;QACL,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACnB,CAAC;CACJ,CAAA;AA/BY,WAAW;IAHvB,WAAI,CAAC;QACF,IAAI,EAAE,SAAS;KAClB,CAAC;GACW,WAAW,CA+BvB;AA/BY,kCAAW","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'groupBy'\n})\nexport class GroupByPipe implements PipeTransform {\n    transform(collection: Object[], term: string) {\n        const newValue = [];\n\n        collection.forEach(col => {\n            const keyVal = this.deepFind(col, term);\n            const index = newValue.findIndex(myObj => myObj.key === keyVal);\n            if (index >= 0) {\n                newValue[index].value.push(col);\n            } else {\n                newValue.push({ key: keyVal, value: [col] });\n            }\n        });\n        return newValue;\n    }\n\n    private deepFind(obj, path) {\n        const paths = path.toString().split(/[.\\[\\]]/);\n        let current = obj;\n\n        paths.forEach(onePath => {\n            if (onePath !== '') {\n                if (!current[onePath]) {\n                    return undefined;\n                } else {\n                    current = current[onePath];\n                }\n            }\n        });\n        return current;\n    }\n}\n"]}]}