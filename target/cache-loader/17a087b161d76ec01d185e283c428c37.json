{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/health/health.component.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/health/health.component.ts","mtime":1564500078595},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c;\nconst core_1 = require(\"@angular/core\");\nconst ng_bootstrap_1 = require(\"@ng-bootstrap/ng-bootstrap\");\nconst health_service_1 = require(\"./health.service\");\nconst health_modal_component_1 = require(\"./health-modal.component\");\nconst shared_1 = require(\"app/shared\");\nlet JhiHealthCheckComponent = class JhiHealthCheckComponent {\n    constructor(modalService, healthService, routesService) {\n        this.modalService = modalService;\n        this.healthService = healthService;\n        this.routesService = routesService;\n    }\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe(route => {\n            this.activeRoute = route;\n            this.displayActiveRouteHealth();\n        });\n    }\n    displayActiveRouteHealth() {\n        this.updatingHealth = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.healthService.checkInstanceHealth(this.activeRoute).subscribe(health => {\n                this.healthData = this.healthService.transformHealthData(health);\n                this.updatingHealth = false;\n            }, error => {\n                if (error.status === 503 || error.status === 500 || error.status === 404) {\n                    this.healthData = this.healthService.transformHealthData(error.json());\n                    this.updatingHealth = false;\n                    if (error.status === 500 || error.status === 404) {\n                        this.routesService.routeDown(this.activeRoute);\n                    }\n                }\n            });\n        }\n        else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    }\n    // user click\n    showHealth(health) {\n        const modalRef = this.modalService.open(health_modal_component_1.JhiHealthModalComponent);\n        modalRef.componentInstance.currentHealth = health;\n        modalRef.result.then(result => {\n            // Left blank intentionally, nothing to do here\n        }, reason => {\n            // Left blank intentionally, nothing to do here\n        });\n    }\n    baseName(name) {\n        return this.healthService.getBaseName(name);\n    }\n    // user click\n    getBadgeClass(statusState) {\n        if (!statusState || statusState !== 'UP') {\n            return 'badge-danger';\n        }\n        else {\n            return 'badge-success';\n        }\n    }\n    subSystemName(name) {\n        return this.healthService.getSubSystemName(name);\n    }\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n};\nJhiHealthCheckComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-health',\n        templateUrl: './health.component.html'\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_bootstrap_1.NgbModal !== \"undefined\" && ng_bootstrap_1.NgbModal) === \"function\" ? _a : Object, typeof (_b = typeof health_service_1.JhiHealthService !== \"undefined\" && health_service_1.JhiHealthService) === \"function\" ? _b : Object, typeof (_c = typeof shared_1.JhiRoutesService !== \"undefined\" && shared_1.JhiRoutesService) === \"function\" ? _c : Object])\n], JhiHealthCheckComponent);\nexports.JhiHealthCheckComponent = JhiHealthCheckComponent;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/health/health.component.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/health/health.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { JhiHealthService } from './health.service';\nimport { JhiHealthModalComponent } from './health-modal.component';\n\nimport { JhiRoutesService, Route } from 'app/shared';\n\n@Component({\n    selector: 'jhi-health',\n    templateUrl: './health.component.html'\n})\nexport class JhiHealthCheckComponent implements OnInit, OnDestroy {\n    healthData: any;\n    updatingHealth: boolean;\n    activeRoute: Route;\n    subscription: Subscription;\n\n    constructor(private modalService: NgbModal, private healthService: JhiHealthService, private routesService: JhiRoutesService) {}\n\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe(route => {\n            this.activeRoute = route;\n            this.displayActiveRouteHealth();\n        });\n    }\n\n    displayActiveRouteHealth() {\n        this.updatingHealth = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.healthService.checkInstanceHealth(this.activeRoute).subscribe(health => {\n                    this.healthData = this.healthService.transformHealthData(health);\n                    this.updatingHealth = false;\n                }, error => {\n                    if (error.status === 503 || error.status === 500 || error.status === 404) {\n                        this.healthData = this.healthService.transformHealthData(error.json());\n                        this.updatingHealth = false;\n                        if (error.status === 500 || error.status === 404) {\n                            this.routesService.routeDown(this.activeRoute);\n                        }\n                    }\n                }\n            );\n        } else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    }\n\n    // user click\n    showHealth(health: any) {\n        const modalRef = this.modalService.open(JhiHealthModalComponent);\n        modalRef.componentInstance.currentHealth = health;\n        modalRef.result.then(result => {\n                // Left blank intentionally, nothing to do here\n            }, reason => {\n                // Left blank intentionally, nothing to do here\n            }\n        );\n    }\n\n    baseName(name: string) {\n        return this.healthService.getBaseName(name);\n    }\n\n    // user click\n    getBadgeClass(statusState) {\n        if (!statusState || statusState !== 'UP') {\n            return 'badge-danger';\n        } else {\n            return 'badge-success';\n        }\n    }\n\n    subSystemName(name: string) {\n        return this.healthService.getSubSystemName(name);\n    }\n\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n"]}]}