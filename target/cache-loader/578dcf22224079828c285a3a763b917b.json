{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/registry/config/config.component.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/registry/config/config.component.ts","mtime":1564500078617},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d;\nconst core_1 = require(\"@angular/core\");\nconst config_service_1 = require(\"./config.service\");\nconst profile_service_1 = require(\"app/layouts/profiles/profile.service\");\nconst __1 = require(\"../\");\nconst refresh_service_1 = require(\"app/shared/refresh/refresh.service\");\nlet JhiConfigComponent = class JhiConfigComponent {\n    constructor(configService, profileService, applicationsService, refreshService) {\n        this.configService = configService;\n        this.profileService = profileService;\n        this.applicationsService = applicationsService;\n        this.refreshService = refreshService;\n        this.application = 'application';\n        this.profile = 'prod';\n        this.label = 'master';\n        this.activeRegistryProfiles = [];\n        this.isNative = true;\n        this.applicationList = ['application'];\n    }\n    ngOnInit() {\n        this.load();\n        this.refresh();\n    }\n    ngOnDestroy() {\n        this.refreshReloadSubscription.unsubscribe();\n    }\n    load() {\n        this.profileService.getProfileInfo().then(response => {\n            this.activeRegistryProfiles = response.activeProfiles;\n            this.isNative = this.activeRegistryProfiles.includes('native');\n            this.configurationSources = response.configurationSources;\n        });\n        this.refreshReloadSubscription = this.refreshService.refreshReload$.subscribe(empty => this.refresh());\n    }\n    refresh() {\n        this.configService.getConfigAsYaml(this.application, this.profile, this.label).subscribe(response => {\n            this.configAsYaml = response;\n        }, () => {\n            this.configAsYaml = '';\n        });\n        this.configService.getConfigAsProperties(this.application, this.profile, this.label).subscribe(response => {\n            this.configAsProperties = response;\n            const keyValueArray = [];\n            this.configAsProperties.split('\\n').forEach(property => {\n                const keyValueSplit = property.split(': ');\n                keyValueArray.push({ key: keyValueSplit[0], value: keyValueSplit[1] });\n            });\n            this.configAsKeyValuePairs = keyValueArray;\n        }, () => {\n            this.configAsProperties = '';\n        });\n        this.configService.getConfigAsJson(this.application, this.profile, this.label).subscribe(response => {\n            this.configAsJson = response;\n        }, () => {\n            this.configAsJson = {};\n        });\n        this.applicationsService.findAll().subscribe(data => {\n            if (data && data.applications) {\n                this.applicationList = ['application'];\n                data.applications.forEach(application => {\n                    const instanceId = application.instances[0].instanceId;\n                    let applicationName;\n                    if (instanceId.indexOf(':') === -1) {\n                        applicationName = application.name.toLowerCase();\n                    }\n                    else {\n                        applicationName = instanceId.substr(0, instanceId.indexOf(':'));\n                    }\n                    this.applicationList.push(applicationName);\n                });\n            }\n        });\n    }\n    getKeys(obj) {\n        return Object.keys(obj);\n    }\n};\nJhiConfigComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-config',\n        templateUrl: './config.component.html'\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof config_service_1.JhiConfigService !== \"undefined\" && config_service_1.JhiConfigService) === \"function\" ? _a : Object, typeof (_b = typeof profile_service_1.ProfileService !== \"undefined\" && profile_service_1.ProfileService) === \"function\" ? _b : Object, typeof (_c = typeof __1.JhiApplicationsService !== \"undefined\" && __1.JhiApplicationsService) === \"function\" ? _c : Object, typeof (_d = typeof refresh_service_1.JhiRefreshService !== \"undefined\" && refresh_service_1.JhiRefreshService) === \"function\" ? _d : Object])\n], JhiConfigComponent);\nexports.JhiConfigComponent = JhiConfigComponent;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/registry/config/config.component.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/registry/config/config.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { JhiConfigService } from './config.service';\nimport { ProfileService } from 'app/layouts/profiles/profile.service';\nimport { JhiApplicationsService } from '../';\nimport { JhiRefreshService } from 'app/shared/refresh/refresh.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'jhi-config',\n    templateUrl: './config.component.html'\n})\nexport class JhiConfigComponent implements OnInit, OnDestroy {\n    application: string;\n    profile: string;\n    label: string;\n    activeRegistryProfiles: any;\n    isNative: boolean;\n    configurationSources: Array<any>;\n    configAsYaml: any;\n    configAsProperties: any;\n    configAsJson: any;\n    configAsKeyValuePairs: any;\n    applicationList: Array<string>;\n\n    refreshReloadSubscription: Subscription;\n\n    constructor(\n        private configService: JhiConfigService,\n        private profileService: ProfileService,\n        private applicationsService: JhiApplicationsService,\n        private refreshService: JhiRefreshService\n    ) {\n        this.application = 'application';\n        this.profile = 'prod';\n        this.label = 'master';\n        this.activeRegistryProfiles = [];\n        this.isNative = true;\n        this.applicationList = ['application'];\n    }\n\n    ngOnInit() {\n        this.load();\n        this.refresh();\n    }\n\n    ngOnDestroy() {\n        this.refreshReloadSubscription.unsubscribe();\n    }\n\n    load() {\n        this.profileService.getProfileInfo().then(response => {\n            this.activeRegistryProfiles = response.activeProfiles;\n            this.isNative = this.activeRegistryProfiles.includes('native');\n            this.configurationSources = response.configurationSources;\n        });\n\n        this.refreshReloadSubscription = this.refreshService.refreshReload$.subscribe(empty => this.refresh());\n    }\n\n    refresh() {\n        this.configService.getConfigAsYaml(this.application, this.profile, this.label).subscribe(response => {\n                this.configAsYaml = response;\n            },\n            () => {\n                this.configAsYaml = '';\n            }\n        );\n\n        this.configService.getConfigAsProperties(this.application, this.profile, this.label).subscribe(response => {\n                this.configAsProperties = response;\n\n                const keyValueArray = [];\n                this.configAsProperties.split('\\n').forEach(property => {\n                    const keyValueSplit = property.split(': ');\n                    keyValueArray.push({ key: keyValueSplit[0], value: keyValueSplit[1] });\n                });\n                this.configAsKeyValuePairs = keyValueArray;\n            },\n            () => {\n                this.configAsProperties = '';\n            }\n        );\n\n        this.configService.getConfigAsJson(this.application, this.profile, this.label).subscribe(response => {\n                this.configAsJson = response;\n            },\n            () => {\n                this.configAsJson = {};\n            }\n        );\n\n        this.applicationsService.findAll().subscribe(data => {\n            if (data && data.applications) {\n                this.applicationList = ['application'];\n                data.applications.forEach(application => {\n                    const instanceId = application.instances[0].instanceId;\n                    let applicationName;\n                    if (instanceId.indexOf(':') === -1) {\n                        applicationName = application.name.toLowerCase();\n                    } else {\n                        applicationName = instanceId.substr(0, instanceId.indexOf(':'));\n                    }\n                    this.applicationList.push(applicationName);\n                });\n            }\n        });\n    }\n\n    getKeys(obj: Object) {\n        return Object.keys(obj);\n    }\n}\n"]}]}