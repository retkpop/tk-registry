{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/metrics/metrics.component.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/metrics/metrics.component.ts","mtime":1564500078600},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c;\nconst core_1 = require(\"@angular/core\");\nconst ng_bootstrap_1 = require(\"@ng-bootstrap/ng-bootstrap\");\nconst metrics_modal_component_1 = require(\"./metrics-modal.component\");\nconst metrics_service_1 = require(\"./metrics.service\");\nconst shared_1 = require(\"app/shared\");\nlet JhiMetricsMonitoringComponent = class JhiMetricsMonitoringComponent {\n    constructor(modalService, metricsService, routesService) {\n        this.modalService = modalService;\n        this.metricsService = metricsService;\n        this.routesService = routesService;\n        this.metrics = {};\n        this.threadData = {};\n        this.updatingMetrics = true;\n        this.JCACHE_KEY = 'jcache.statistics';\n    }\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe(route => {\n            this.activeRoute = route;\n            this.displayActiveRouteMetrics();\n        });\n    }\n    refresh() {\n        this.routesService.reloadRoutes();\n    }\n    displayActiveRouteMetrics() {\n        this.updatingMetrics = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.metricsService.getInstanceMetrics(this.activeRoute).subscribe(metrics => {\n                this.metrics = metrics;\n                this.metricsService.instanceThreadDump(this.activeRoute).subscribe(data => {\n                    this.threadData = data.threads;\n                    this.threadStats = {\n                        threadDumpRunnable: 0,\n                        threadDumpWaiting: 0,\n                        threadDumpTimedWaiting: 0,\n                        threadDumpBlocked: 0,\n                        threadDumpAll: 0\n                    };\n                    this.threadData.forEach(value => {\n                        if (value.threadState === 'RUNNABLE') {\n                            this.threadStats.threadDumpRunnable += 1;\n                        }\n                        else if (value.threadState === 'WAITING') {\n                            this.threadStats.threadDumpWaiting += 1;\n                        }\n                        else if (value.threadState === 'TIMED_WAITING') {\n                            this.threadStats.threadDumpTimedWaiting += 1;\n                        }\n                        else if (value.threadState === 'BLOCKED') {\n                            this.threadStats.threadDumpBlocked += 1;\n                        }\n                    });\n                    this.threadStats.threadDumpAll =\n                        this.threadStats.threadDumpRunnable +\n                            this.threadStats.threadDumpWaiting +\n                            this.threadStats.threadDumpTimedWaiting +\n                            this.threadStats.threadDumpBlocked;\n                    this.updatingMetrics = false;\n                });\n            }, error => {\n                if (error.status === 503 || error.status === 500 || error.status === 404) {\n                    if (error.status === 500 || error.status === 404) {\n                        this.routesService.routeDown(this.activeRoute);\n                    }\n                }\n            });\n        }\n        else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    }\n    filterNaN(input) {\n        if (isNaN(input)) {\n            return 0;\n        }\n        return input;\n    }\n    convertMillisecondsToDuration(ms) {\n        const times = {\n            year: 31557600000,\n            month: 2629746000,\n            day: 86400000,\n            hour: 3600000,\n            minute: 60000,\n            second: 1000\n        };\n        let time_string = '';\n        let plural = '';\n        for (const key in times) {\n            if (Math.floor(ms / times[key]) > 0) {\n                if (Math.floor(ms / times[key]) > 1) {\n                    plural = 's';\n                }\n                else {\n                    plural = '';\n                }\n                time_string += Math.floor(ms / times[key]).toString() + ' ' + key.toString() + plural + ' ';\n                ms = ms - times[key] * Math.floor(ms / times[key]);\n            }\n        }\n        return time_string;\n    }\n    open() {\n        const modalRef = this.modalService.open(metrics_modal_component_1.JhiMetricsMonitoringModalComponent, { size: 'lg' });\n        modalRef.componentInstance.threadDump = this.threadData;\n    }\n    isObjectExisting(metrics, key) {\n        return metrics && metrics[key];\n    }\n    isObjectExistingAndNotEmpty(metrics, key) {\n        return this.isObjectExisting(metrics, key) && JSON.stringify(metrics[key]) !== '{}';\n    }\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    }\n};\nJhiMetricsMonitoringComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-metrics',\n        templateUrl: './metrics.component.html'\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_bootstrap_1.NgbModal !== \"undefined\" && ng_bootstrap_1.NgbModal) === \"function\" ? _a : Object, typeof (_b = typeof metrics_service_1.JhiMetricsService !== \"undefined\" && metrics_service_1.JhiMetricsService) === \"function\" ? _b : Object, typeof (_c = typeof shared_1.JhiRoutesService !== \"undefined\" && shared_1.JhiRoutesService) === \"function\" ? _c : Object])\n], JhiMetricsMonitoringComponent);\nexports.JhiMetricsMonitoringComponent = JhiMetricsMonitoringComponent;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/metrics/metrics.component.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/metrics/metrics.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { JhiMetricsMonitoringModalComponent } from './metrics-modal.component';\nimport { JhiMetricsService } from './metrics.service';\nimport { JhiRoutesService, Route } from 'app/shared';\n\n@Component({\n    selector: 'jhi-metrics',\n    templateUrl: './metrics.component.html'\n})\nexport class JhiMetricsMonitoringComponent implements OnInit, OnDestroy {\n    metrics: any = {};\n    threadData: any = {};\n    threadStats: {\n        threadDumpRunnable: number;\n        threadDumpWaiting: number;\n        threadDumpTimedWaiting: number;\n        threadDumpBlocked: number;\n        threadDumpAll: number;\n    };\n    updatingMetrics = true;\n    JCACHE_KEY: string;\n\n    activeRoute: Route;\n    subscription: Subscription;\n\n    constructor(private modalService: NgbModal, private metricsService: JhiMetricsService, private routesService: JhiRoutesService) {\n        this.JCACHE_KEY = 'jcache.statistics';\n    }\n\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe(route => {\n            this.activeRoute = route;\n            this.displayActiveRouteMetrics();\n        });\n    }\n\n    refresh() {\n        this.routesService.reloadRoutes();\n    }\n\n    displayActiveRouteMetrics() {\n        this.updatingMetrics = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.metricsService.getInstanceMetrics(this.activeRoute).subscribe(metrics => {\n                    this.metrics = metrics;\n                    this.metricsService.instanceThreadDump(this.activeRoute).subscribe(data => {\n                        this.threadData = data.threads;\n\n                        this.threadStats = {\n                            threadDumpRunnable: 0,\n                            threadDumpWaiting: 0,\n                            threadDumpTimedWaiting: 0,\n                            threadDumpBlocked: 0,\n                            threadDumpAll: 0\n                        };\n\n                        this.threadData.forEach(value => {\n                            if (value.threadState === 'RUNNABLE') {\n                                this.threadStats.threadDumpRunnable += 1;\n                            } else if (value.threadState === 'WAITING') {\n                                this.threadStats.threadDumpWaiting += 1;\n                            } else if (value.threadState === 'TIMED_WAITING') {\n                                this.threadStats.threadDumpTimedWaiting += 1;\n                            } else if (value.threadState === 'BLOCKED') {\n                                this.threadStats.threadDumpBlocked += 1;\n                            }\n                        });\n\n                        this.threadStats.threadDumpAll =\n                            this.threadStats.threadDumpRunnable +\n                            this.threadStats.threadDumpWaiting +\n                            this.threadStats.threadDumpTimedWaiting +\n                            this.threadStats.threadDumpBlocked;\n\n                        this.updatingMetrics = false;\n                    });\n                }, error => {\n                    if (error.status === 503 || error.status === 500 || error.status === 404) {\n                        if (error.status === 500 || error.status === 404) {\n                            this.routesService.routeDown(this.activeRoute);\n                        }\n                    }\n                }\n            );\n        } else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    }\n\n    filterNaN(input) {\n        if (isNaN(input)) {\n            return 0;\n        }\n        return input;\n    }\n\n    convertMillisecondsToDuration(ms) {\n        const times = {\n            year: 31557600000,\n            month: 2629746000,\n            day: 86400000,\n            hour: 3600000,\n            minute: 60000,\n            second: 1000\n        };\n        let time_string = '';\n        let plural = '';\n        for (const key in times) {\n            if (Math.floor(ms / times[key]) > 0) {\n                if (Math.floor(ms / times[key]) > 1) {\n                    plural = 's';\n                } else {\n                    plural = '';\n                }\n                time_string += Math.floor(ms / times[key]).toString() + ' ' + key.toString() + plural + ' ';\n                ms = ms - times[key] * Math.floor(ms / times[key]);\n            }\n        }\n        return time_string;\n    }\n\n    open() {\n        const modalRef = this.modalService.open(JhiMetricsMonitoringModalComponent, { size: 'lg' });\n        modalRef.componentInstance.threadDump = this.threadData;\n    }\n\n    isObjectExisting(metrics: any, key: string) {\n        return metrics && metrics[key];\n    }\n\n    isObjectExistingAndNotEmpty(metrics: any, key: string) {\n        return this.isObjectExisting(metrics, key) && JSON.stringify(metrics[key]) !== '{}';\n    }\n\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    }\n}\n"]}]}