{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/registry/config/config.service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/registry/config/config.service.ts","mtime":1564500078619},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nlet JhiConfigService = class JhiConfigService {\n    constructor(http) {\n        this.http = http;\n    }\n    getConfigAsYaml(application, profile, label) {\n        return this.http.get('config/' + label + '/' + application + '-' + profile + '.yml', { responseType: 'text' });\n    }\n    getConfigAsProperties(application, profile, label) {\n        return this.http.get('config/' + label + '/' + application + '-' + profile + '.properties', { responseType: 'text' });\n    }\n    getConfigAsJson(application, profile, label) {\n        return this.http.get('config/' + label + '/' + application + '-' + profile + '.json', { responseType: 'text' });\n    }\n};\nJhiConfigService = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], JhiConfigService);\nexports.JhiConfigService = JhiConfigService;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/registry/config/config.service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/registry/config/config.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAAkD;AAIlD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IACzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,eAAe,CAAC,WAAmB,EAAE,OAAe,EAAE,KAAa;QAC/D,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,GAAG,GAAG,GAAG,OAAO,GAAG,MAAM,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;IACnH,CAAC;IAED,qBAAqB,CAAC,WAAmB,EAAE,OAAe,EAAE,KAAa;QACrE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,GAAG,GAAG,GAAG,OAAO,GAAG,aAAa,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;IAC1H,CAAC;IAED,eAAe,CAAC,WAAmB,EAAE,OAAe,EAAE,KAAa;QAC/D,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,GAAG,GAAG,GAAG,OAAO,GAAG,OAAO,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;IACpH,CAAC;CACJ,CAAA;AAdY,gBAAgB;IAD5B,iBAAU,EAAE;iEAEiB,iBAAU,oBAAV,iBAAU;GAD3B,gBAAgB,CAc5B;AAdY,4CAAgB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class JhiConfigService {\n    constructor(private http: HttpClient) {}\n\n    getConfigAsYaml(application: string, profile: string, label: string): Observable<any> {\n        return this.http.get('config/' + label + '/' + application + '-' + profile + '.yml', { responseType: 'text' });\n    }\n\n    getConfigAsProperties(application: string, profile: string, label: string): Observable<any> {\n        return this.http.get('config/' + label + '/' + application + '-' + profile + '.properties', { responseType: 'text' });\n    }\n\n    getConfigAsJson(application: string, profile: string, label: string): Observable<any> {\n        return this.http.get('config/' + label + '/' + application + '-' + profile + '.json', { responseType: 'text' });\n    }\n}\n"]}]}