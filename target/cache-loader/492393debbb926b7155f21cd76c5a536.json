{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/configuration/configuration.service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/configuration/configuration.service.ts","mtime":1564500078593},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nlet JhiConfigurationService = class JhiConfigurationService {\n    constructor(http) {\n        this.http = http;\n    }\n    getConfigs(prefix = '') {\n        return this.http.get(prefix + 'management/configprops', { observe: 'response' }).map((res) => {\n            const properties = [];\n            const propertiesObject = this.getConfigPropertiesObjects(res.body);\n            for (const key in propertiesObject) {\n                if (propertiesObject.hasOwnProperty(key)) {\n                    properties.push(propertiesObject[key]);\n                }\n            }\n            return properties.sort((propertyA, propertyB) => {\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n            });\n        });\n    }\n    getConfigPropertiesObjects(res) {\n        // This code is for Spring Boot 2\n        if (res['contexts'] !== undefined) {\n            for (const key in res['contexts']) {\n                // If the key is not bootstrap, it will be the ApplicationContext Id\n                // For default app, it is applicationName\n                // For microservice, it is applicationName-1\n                if (!key.startsWith('bootstrap')) {\n                    return res['contexts'][key]['beans'];\n                }\n            }\n        }\n        // Otherwise, return res.json(), which is for Spring Boot 1\n        return res;\n    }\n    getInstanceConfigs(instance) {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.getConfigs(instance.prefix + '/');\n        }\n        return this.getConfigs();\n    }\n    getEnv(prefix = '') {\n        return this.http.get(prefix + 'management/env', { observe: 'response' }).map((res) => {\n            const properties = {};\n            const propertiesObject = res.body;\n            if (propertiesObject['propertySources'] !== undefined) {\n                // This is for Spring Boot 2\n                const propertySources = propertiesObject['propertySources'];\n                for (const propertyObject of propertySources) {\n                    const name = propertyObject['name'];\n                    const detailProperties = propertyObject['properties'];\n                    const vals = [];\n                    for (const keyDetail in detailProperties) {\n                        if (detailProperties.hasOwnProperty(keyDetail)) {\n                            vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\n                        }\n                    }\n                    properties[name] = vals;\n                }\n            }\n            else {\n                // This is for Spring Boot 1\n                for (const key in propertiesObject) {\n                    if (propertiesObject.hasOwnProperty(key)) {\n                        const valsObject = propertiesObject[key];\n                        const vals = [];\n                        for (const valKey in valsObject) {\n                            if (valsObject.hasOwnProperty(valKey)) {\n                                vals.push({ key: valKey, val: valsObject[valKey] });\n                            }\n                        }\n                        properties[key] = vals;\n                    }\n                }\n            }\n            return properties;\n        });\n    }\n    getInstanceEnv(instance) {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.getEnv(instance.prefix + '/');\n        }\n        return this.getEnv();\n    }\n};\nJhiConfigurationService = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], JhiConfigurationService);\nexports.JhiConfigurationService = JhiConfigurationService;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/configuration/configuration.service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/configuration/configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { Route } from 'app/shared';\n\n@Injectable()\nexport class JhiConfigurationService {\n    constructor(private http: HttpClient) {}\n\n    getConfigs(prefix: String = ''): Observable<any> {\n        return this.http.get(prefix + 'management/configprops', { observe: 'response' }).map((res: HttpResponse<any>) => {\n            const properties: any[] = [];\n            const propertiesObject = this.getConfigPropertiesObjects(res.body);\n            for (const key in propertiesObject) {\n                if (propertiesObject.hasOwnProperty(key)) {\n                    properties.push(propertiesObject[key]);\n                }\n            }\n\n            return properties.sort((propertyA, propertyB) => {\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n            });\n        });\n    }\n\n    getConfigPropertiesObjects(res: Object) {\n        // This code is for Spring Boot 2\n        if (res['contexts'] !== undefined) {\n            for (const key in res['contexts']) {\n                // If the key is not bootstrap, it will be the ApplicationContext Id\n                // For default app, it is applicationName\n                // For microservice, it is applicationName-1\n                if (!key.startsWith('bootstrap')) {\n                    return res['contexts'][key]['beans'];\n                }\n            }\n        }\n        // Otherwise, return res.json(), which is for Spring Boot 1\n        return res;\n    }\n\n    getInstanceConfigs(instance: Route): Observable<any> {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.getConfigs(instance.prefix + '/');\n        }\n        return this.getConfigs();\n    }\n\n    getEnv(prefix: String = ''): Observable<any> {\n        return this.http.get(prefix + 'management/env', { observe: 'response' }).map((res: HttpResponse<any>) => {\n            const properties: any = {};\n            const propertiesObject = res.body;\n\n            if (propertiesObject['propertySources'] !== undefined) {\n                // This is for Spring Boot 2\n                const propertySources = propertiesObject['propertySources'];\n                for (const propertyObject of propertySources) {\n                    const name = propertyObject['name'];\n                    const detailProperties = propertyObject['properties'];\n                    const vals: any[] = [];\n                    for (const keyDetail in detailProperties) {\n                        if (detailProperties.hasOwnProperty(keyDetail)) {\n                            vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\n                        }\n                    }\n                    properties[name] = vals;\n                }\n            } else {\n                // This is for Spring Boot 1\n                for (const key in propertiesObject) {\n                    if (propertiesObject.hasOwnProperty(key)) {\n                        const valsObject = propertiesObject[key];\n                        const vals: any[] = [];\n                        for (const valKey in valsObject) {\n                            if (valsObject.hasOwnProperty(valKey)) {\n                                vals.push({ key: valKey, val: valsObject[valKey] });\n                            }\n                        }\n                        properties[key] = vals;\n                    }\n                }\n            }\n            return properties;\n        });\n    }\n\n    getInstanceEnv(instance: Route): Observable<any> {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.getEnv(instance.prefix + '/');\n        }\n        return this.getEnv();\n    }\n}\n"]}]}