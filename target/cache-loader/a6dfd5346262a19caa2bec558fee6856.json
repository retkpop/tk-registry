{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/routes/route-selector.component.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/routes/route-selector.component.ts","mtime":1564500078629},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b;\nconst core_1 = require(\"@angular/core\");\nconst routes_service_1 = require(\"./routes.service\");\nconst refresh_service_1 = require(\"app/shared/refresh/refresh.service\");\nlet JhiRouteSelectorComponent = class JhiRouteSelectorComponent {\n    constructor(routesService, refreshService) {\n        this.routesService = routesService;\n        this.refreshService = refreshService;\n        this.searchedInstance = '';\n    }\n    ngOnInit() {\n        this.activeRoute = this.routesService.getSelectedInstance();\n        this.updateRoute();\n        this.refreshReloadSubscription = this.refreshService.refreshReload$.subscribe(reload => this.updateRoute());\n        this.routeReloadSubscription = this.routesService.routeReload$.subscribe(reload => this.updateRoute());\n        this.routeDownSubscription = this.routesService.routeDown$.subscribe(route => {\n            this.downRoute(route);\n            this.setActiveRoute(null);\n        });\n    }\n    ngOnDestroy() {\n        /** prevent memory leak when component destroyed **/\n        this.routeReloadSubscription.unsubscribe();\n        this.routeDownSubscription.unsubscribe();\n        this.refreshReloadSubscription.unsubscribe();\n    }\n    /** Change active route only if exists, else choose Registry **/\n    setActiveRoute(instance) {\n        if (instance && this.routes && this.routes.findIndex(r => r.appName === instance.appName) !== -1) {\n            this.activeRoute = instance;\n        }\n        else if (this.routes && this.routes.length > 0) {\n            this.activeRoute = this.routes[0];\n        }\n        this.routesService.storeSelectedInstance(this.activeRoute);\n        this.routesService.routeChange(this.activeRoute);\n    }\n    updateRoute() {\n        this.updatingRoutes = true;\n        this.routesService.findAll().subscribe(routes => {\n            this.savedRoutes = routes;\n            this.routes = routes;\n            this.searchedInstance = '';\n            if (this.activeRoute) {\n                /** in case of new refresh call **/\n                this.setActiveRoute(this.activeRoute);\n            }\n            else if (routes.length > 0) {\n                this.setActiveRoute(routes[0]);\n            }\n            this.updatingRoutes = false;\n            this.routesService.routesChange(routes);\n        }, error => {\n            if (error.status === 503 || error.status === 500 || error.status === 404) {\n                if (error.status === 500 || error.status === 404) {\n                    this.downRoute(this.activeRoute);\n                    this.setActiveRoute(null);\n                }\n                this.updatingRoutes = false;\n            }\n        });\n    }\n    downRoute(instance) {\n        if (instance) {\n            instance.status = 'DOWN';\n        }\n    }\n    /* ==========================================================================\n                                        UI PART\n     ========================================================================== */\n    getActiveRoute() {\n        return this.activeRoute.serviceId ? this.activeRoute.serviceId.toUpperCase() : this.activeRoute.appName.toUpperCase();\n    }\n    getBadgeClassRoute(route) {\n        if (route && !route.status) {\n            route.status = 'UP';\n        }\n        return this.getBadgeClass(route.status);\n    }\n    getBadgeClass(statusState) {\n        if (statusState && (statusState === 'UP' || statusState.toLowerCase() === 'starting')) {\n            return 'badge-success';\n        }\n        else {\n            return 'badge-danger';\n        }\n    }\n    state(route) {\n        if (route && route.status && route.status === 'DOWN') {\n            return 'disabled';\n        }\n        else if (route && route.serviceId === this.activeRoute.serviceId) {\n            return 'active';\n        }\n    }\n    searchByAppName() {\n        if (this.searchedInstance === '') {\n            this.routes = this.savedRoutes;\n        }\n        else {\n            this.routes = this.savedRoutes.filter(route => {\n                return route.appName.includes(this.searchedInstance);\n            });\n        }\n    }\n    /**\n     * Close the dropdown element.\n     * The dropdown can be closed directly in the HTML, but cause the warning\n     * (\"The method \"drop\" that you're trying to access does not exist in the class declaration.\").\n     * @param dropdown\n     */\n    closeDropDown(dropdown) {\n        if (dropdown) {\n            dropdown.close();\n        }\n    }\n};\nJhiRouteSelectorComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-route-selector',\n        templateUrl: './route-selector.component.html',\n        styleUrls: ['route-selector.component.scss']\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof routes_service_1.JhiRoutesService !== \"undefined\" && routes_service_1.JhiRoutesService) === \"function\" ? _a : Object, typeof (_b = typeof refresh_service_1.JhiRefreshService !== \"undefined\" && refresh_service_1.JhiRefreshService) === \"function\" ? _b : Object])\n], JhiRouteSelectorComponent);\nexports.JhiRouteSelectorComponent = JhiRouteSelectorComponent;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/routes/route-selector.component.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/routes/route-selector.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { JhiRoutesService } from './routes.service';\nimport { Route } from './route.model';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\nimport { JhiRefreshService } from 'app/shared/refresh/refresh.service';\n\n@Component({\n    selector: 'jhi-route-selector',\n    templateUrl: './route-selector.component.html',\n    styleUrls: ['route-selector.component.scss']\n})\nexport class JhiRouteSelectorComponent implements OnInit, OnDestroy {\n    activeRoute: Route;\n    routes: Route[];\n    savedRoutes: Route[];\n    updatingRoutes: boolean;\n    searchedInstance = '';\n    routeReloadSubscription: Subscription;\n    routeDownSubscription: Subscription;\n\n    refreshReloadSubscription: Subscription;\n\n    constructor(private routesService: JhiRoutesService, private refreshService: JhiRefreshService) {}\n\n    ngOnInit() {\n        this.activeRoute = this.routesService.getSelectedInstance();\n\n        this.updateRoute();\n        this.refreshReloadSubscription = this.refreshService.refreshReload$.subscribe(reload => this.updateRoute());\n        this.routeReloadSubscription = this.routesService.routeReload$.subscribe(reload => this.updateRoute());\n        this.routeDownSubscription = this.routesService.routeDown$.subscribe(route => {\n            this.downRoute(route);\n            this.setActiveRoute(null);\n        });\n    }\n\n    ngOnDestroy() {\n        /** prevent memory leak when component destroyed **/\n        this.routeReloadSubscription.unsubscribe();\n        this.routeDownSubscription.unsubscribe();\n        this.refreshReloadSubscription.unsubscribe();\n    }\n\n    /** Change active route only if exists, else choose Registry **/\n    setActiveRoute(instance: Route) {\n        if (instance && this.routes && this.routes.findIndex(r => r.appName === instance.appName) !== -1) {\n            this.activeRoute = instance;\n        } else if (this.routes && this.routes.length > 0) {\n            this.activeRoute = this.routes[0];\n        }\n        this.routesService.storeSelectedInstance(this.activeRoute);\n        this.routesService.routeChange(this.activeRoute);\n    }\n\n    private updateRoute() {\n        this.updatingRoutes = true;\n        this.routesService.findAll().subscribe(routes => {\n                this.savedRoutes = routes;\n                this.routes = routes;\n                this.searchedInstance = '';\n\n                if (this.activeRoute) {\n                    /** in case of new refresh call **/\n                    this.setActiveRoute(this.activeRoute);\n                } else if (routes.length > 0) {\n                    this.setActiveRoute(routes[0]);\n                }\n                this.updatingRoutes = false;\n                this.routesService.routesChange(routes);\n            }, error => {\n                if (error.status === 503 || error.status === 500 || error.status === 404) {\n                    if (error.status === 500 || error.status === 404) {\n                        this.downRoute(this.activeRoute);\n                        this.setActiveRoute(null);\n                    }\n                    this.updatingRoutes = false;\n                }\n            }\n        );\n    }\n\n    private downRoute(instance: Route) {\n        if (instance) {\n            instance.status = 'DOWN';\n        }\n    }\n\n    /* ==========================================================================\n                                        UI PART\n     ========================================================================== */\n\n    getActiveRoute() {\n        return this.activeRoute.serviceId ? this.activeRoute.serviceId.toUpperCase() : this.activeRoute.appName.toUpperCase();\n    }\n\n    getBadgeClassRoute(route: Route) {\n        if (route && !route.status) {\n            route.status = 'UP';\n        }\n        return this.getBadgeClass(route.status);\n    }\n\n    private getBadgeClass(statusState) {\n        if (statusState && (statusState === 'UP' || statusState.toLowerCase() === 'starting')) {\n            return 'badge-success';\n        } else {\n            return 'badge-danger';\n        }\n    }\n\n    state(route: Route) {\n        if (route && route.status && route.status === 'DOWN') {\n            return 'disabled';\n        } else if (route && route.serviceId === this.activeRoute.serviceId) {\n            return 'active';\n        }\n    }\n\n    searchByAppName() {\n        if (this.searchedInstance === '') {\n            this.routes = this.savedRoutes;\n        } else {\n            this.routes = this.savedRoutes.filter(route => {\n                return route.appName.includes(this.searchedInstance);\n            });\n        }\n    }\n\n    /**\n     * Close the dropdown element.\n     * The dropdown can be closed directly in the HTML, but cause the warning\n     * (\"The method \"drop\" that you're trying to access does not exist in the class declaration.\").\n     * @param dropdown\n     */\n    closeDropDown(dropdown: NgbDropdown) {\n        if (dropdown) {\n            dropdown.close();\n        }\n    }\n}\n"]}]}