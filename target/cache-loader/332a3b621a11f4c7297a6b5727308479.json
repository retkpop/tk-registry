{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/refresh/refresh-selector.component.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/refresh/refresh-selector.component.ts","mtime":1564500078628},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst Rx_1 = require(\"rxjs/Rx\");\nconst refresh_service_1 = require(\"./refresh.service\");\nlet JhiRefreshSelectorComponent = class JhiRefreshSelectorComponent {\n    constructor(refreshService) {\n        this.refreshService = refreshService;\n        this.refreshTimes = [0, 5, 10, 30, 60, 300];\n        this.activeRefreshTime = this.refreshTimes[0];\n    }\n    ngOnInit() {\n        this.activeRefreshTime = this.refreshService.getSelectedRefreshTime();\n        this.refreshChangedSubscription = this.refreshService.refreshChanged$.subscribe(empty => this.launchTimer(true));\n        this.launchTimer(false);\n    }\n    ngOnDestroy() {\n        /** prevent memory leak when component destroyed **/\n        this.refreshChangedSubscription.unsubscribe();\n        if (this.refreshTimer) {\n            this.refreshTimer.unsubscribe();\n        }\n    }\n    manualRefresh() {\n        this.refreshService.refreshReload();\n    }\n    /** Change active time only if exists, else 0 **/\n    setActiveRefreshTime(time) {\n        if (time && this.refreshTimes.findIndex(t => t === time) !== -1) {\n            this.activeRefreshTime = time;\n        }\n        else {\n            this.activeRefreshTime = this.refreshTimes[0];\n        }\n        this.refreshService.storeSelectedRefreshTime(time);\n        this.refreshService.refreshChanged();\n    }\n    /** Init the timer **/\n    subscribe() {\n        if (this.activeRefreshTime && this.activeRefreshTime > 0) {\n            this.refreshTimer = Rx_1.Observable.interval(this.activeRefreshTime * 1000).subscribe(() => {\n                this.refreshService.refreshReload();\n            });\n        }\n    }\n    /** Launch (or relaunch if true) the timer. **/\n    launchTimer(relaunch) {\n        if (relaunch && this.refreshTimer) {\n            this.refreshTimer.unsubscribe();\n        }\n        this.subscribe();\n    }\n    /* ==========================================================================\n                                        UI PART\n     ========================================================================== */\n    classTime() {\n        if (this.activeRefreshTime <= 0) {\n            return 'fa fa-pause';\n        }\n        return 'fa fa-repeat';\n    }\n    stateTime(time) {\n        if (time === this.activeRefreshTime) {\n            return 'active';\n        }\n    }\n    getActiveRefreshTime() {\n        if (this.activeRefreshTime <= 0) {\n            return 'disabled';\n        }\n        return this.activeRefreshTime + ' sec.';\n    }\n};\nJhiRefreshSelectorComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-refresh-selector',\n        templateUrl: './refresh-selector.component.html',\n        styleUrls: ['refresh-selector.component.scss']\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof refresh_service_1.JhiRefreshService !== \"undefined\" && refresh_service_1.JhiRefreshService) === \"function\" ? _a : Object])\n], JhiRefreshSelectorComponent);\nexports.JhiRefreshSelectorComponent = JhiRefreshSelectorComponent;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/refresh/refresh-selector.component.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/refresh/refresh-selector.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Rx';\nimport { JhiRefreshService } from './refresh.service';\n\n@Component({\n    selector: 'jhi-refresh-selector',\n    templateUrl: './refresh-selector.component.html',\n    styleUrls: ['refresh-selector.component.scss']\n})\nexport class JhiRefreshSelectorComponent implements OnInit, OnDestroy {\n    activeRefreshTime: number;\n    refreshTimes: number[];\n    refreshTimer: Subscription;\n    refreshChangedSubscription: Subscription;\n\n    constructor(private refreshService: JhiRefreshService) {\n        this.refreshTimes = [0, 5, 10, 30, 60, 300];\n        this.activeRefreshTime = this.refreshTimes[0];\n    }\n\n    ngOnInit() {\n        this.activeRefreshTime = this.refreshService.getSelectedRefreshTime();\n        this.refreshChangedSubscription = this.refreshService.refreshChanged$.subscribe(empty => this.launchTimer(true));\n        this.launchTimer(false);\n    }\n\n    ngOnDestroy() {\n        /** prevent memory leak when component destroyed **/\n        this.refreshChangedSubscription.unsubscribe();\n        if (this.refreshTimer) {\n            this.refreshTimer.unsubscribe();\n        }\n    }\n\n    manualRefresh() {\n        this.refreshService.refreshReload();\n    }\n\n    /** Change active time only if exists, else 0 **/\n    setActiveRefreshTime(time: number) {\n        if (time && this.refreshTimes.findIndex(t => t === time) !== -1) {\n            this.activeRefreshTime = time;\n        } else {\n            this.activeRefreshTime = this.refreshTimes[0];\n        }\n        this.refreshService.storeSelectedRefreshTime(time);\n        this.refreshService.refreshChanged();\n    }\n\n    /** Init the timer **/\n    subscribe() {\n        if (this.activeRefreshTime && this.activeRefreshTime > 0) {\n            this.refreshTimer = Observable.interval(this.activeRefreshTime * 1000).subscribe(() => {\n                this.refreshService.refreshReload();\n            });\n        }\n    }\n\n    /** Launch (or relaunch if true) the timer. **/\n    launchTimer(relaunch: boolean) {\n        if (relaunch && this.refreshTimer) {\n            this.refreshTimer.unsubscribe();\n        }\n        this.subscribe();\n    }\n\n    /* ==========================================================================\n                                        UI PART\n     ========================================================================== */\n\n    classTime(): string {\n        if (this.activeRefreshTime <= 0) {\n            return 'fa fa-pause';\n        }\n        return 'fa fa-repeat';\n    }\n\n    stateTime(time: number): string {\n        if (time === this.activeRefreshTime) {\n            return 'active';\n        }\n    }\n\n    getActiveRefreshTime(): string {\n        if (this.activeRefreshTime <= 0) {\n            return 'disabled';\n        }\n        return this.activeRefreshTime + ' sec.';\n    }\n}\n"]}]}