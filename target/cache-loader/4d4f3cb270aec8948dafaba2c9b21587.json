{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/logfile/logfile.component.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/logfile/logfile.component.ts","mtime":1564500078596},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c;\nconst core_1 = require(\"@angular/core\");\nconst logfile_service_1 = require(\"./logfile.service\");\nconst shared_1 = require(\"app/shared\");\nlet JhiLogfileComponent = class JhiLogfileComponent {\n    constructor(jhiLogfileService, routesService) {\n        this.jhiLogfileService = jhiLogfileService;\n        this.routesService = routesService;\n    }\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe(route => {\n            this.activeRoute = route;\n            this.displayActiveRouteLog();\n        });\n    }\n    displayActiveRouteLog() {\n        this.updatingLogfile = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.jhiLogfileService.getInstanceLogfile(this.activeRoute).subscribe(logtxt => {\n                this.logtxt = logtxt;\n                this.updatingLogfile = false;\n            }, error => {\n                if (error.status === 503 || error.status === 500 || error.status === 404) {\n                    this.logtxt =\n                        'No available logfile. Please note that it is not available by default, you need to set up the Spring Boot properties below! \\n' +\n                            'Please check:\\n ' +\n                            '- if the microservice is up\\n ' +\n                            '- if these properties are set: \\n ' +\n                            '    - logging.path\\n ' +\n                            '    - logging.file (to avoid using the same spring.log)\\n\\n' +\n                            'See:\\n ' +\n                            '- https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html\\n ' +\n                            '- https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html';\n                    this.updatingLogfile = false;\n                }\n            });\n        }\n    }\n    scrollToBottom() {\n        this.logFileViewer.nativeElement.scrollTop = this.logFileViewer.nativeElement.scrollHeight;\n    }\n    scrollToTop() {\n        this.logFileViewer.nativeElement.scrollTop = this.logFileViewer.nativeElement.scrolledUp;\n    }\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    }\n};\ntslib_1.__decorate([\n    core_1.ViewChild('logfile'),\n    tslib_1.__metadata(\"design:type\", typeof (_a = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _a : Object)\n], JhiLogfileComponent.prototype, \"logFileViewer\", void 0);\nJhiLogfileComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-logfile',\n        templateUrl: './logfile.component.html',\n        styleUrls: ['logfile.scss']\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof logfile_service_1.JhiLogfileService !== \"undefined\" && logfile_service_1.JhiLogfileService) === \"function\" ? _b : Object, typeof (_c = typeof shared_1.JhiRoutesService !== \"undefined\" && shared_1.JhiRoutesService) === \"function\" ? _c : Object])\n], JhiLogfileComponent);\nexports.JhiLogfileComponent = JhiLogfileComponent;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/logfile/logfile.component.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/logfile/logfile.component.ts"],"names":[],"mappings":";;;;AAAA,wCAAoF;AAEpF,uDAAsD;AAEtD,uCAAqD;AAOrD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAQ5B,YAAoB,iBAAoC,EAAU,aAA+B;QAA7E,sBAAiB,GAAjB,iBAAiB,CAAmB;QAAU,kBAAa,GAAb,aAAa,CAAkB;IAAG,CAAC;IAErG,QAAQ;QACJ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACnE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qBAAqB;QACjB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,MAAM,EAAE;YACxD,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;gBACvE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YACjC,CAAC,EAAE,KAAK,CAAC,EAAE;gBACP,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;oBACtE,IAAI,CAAC,MAAM;wBACP,gIAAgI;4BAChI,kBAAkB;4BAClB,gCAAgC;4BAChC,oCAAoC;4BACpC,uBAAuB;4BACvB,6DAA6D;4BAC7D,SAAS;4BACT,qGAAqG;4BACrG,qFAAqF,CAAC;oBAC1F,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;iBAChC;YACL,CAAC,CACJ,CAAC;SACL;IACL,CAAC;IAED,cAAc;QACV,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC;IAC/F,CAAC;IAED,WAAW;QACP,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC;IAC7F,CAAC;IAED,WAAW;QACP,+CAA+C;QAC/C,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;CACJ,CAAA;AAhDyB;IAArB,gBAAS,CAAC,SAAS,CAAC;0DAAwB,iBAAU,oBAAV,iBAAU;0DAAC;AAN/C,mBAAmB;IAL/B,gBAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,WAAW,EAAE,0BAA0B;QACvC,SAAS,EAAE,CAAC,cAAc,CAAC;KAC9B,CAAC;iEASyC,mCAAiB,oBAAjB,mCAAiB,oDAAyB,yBAAgB,oBAAhB,yBAAgB;GARxF,mBAAmB,CAsD/B;AAtDY,kDAAmB","sourcesContent":["import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { JhiLogfileService } from './logfile.service';\n\nimport { JhiRoutesService, Route } from 'app/shared';\n\n@Component({\n    selector: 'jhi-logfile',\n    templateUrl: './logfile.component.html',\n    styleUrls: ['logfile.scss']\n})\nexport class JhiLogfileComponent implements OnInit, OnDestroy {\n    activeRoute: Route;\n    updatingLogfile: boolean;\n    logtxt: string;\n    subscription: Subscription;\n\n    @ViewChild('logfile') private logFileViewer: ElementRef;\n\n    constructor(private jhiLogfileService: JhiLogfileService, private routesService: JhiRoutesService) {}\n\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe(route => {\n            this.activeRoute = route;\n            this.displayActiveRouteLog();\n        });\n    }\n\n    displayActiveRouteLog() {\n        this.updatingLogfile = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.jhiLogfileService.getInstanceLogfile(this.activeRoute).subscribe(logtxt => {\n                    this.logtxt = logtxt;\n                    this.updatingLogfile = false;\n                }, error => {\n                    if (error.status === 503 || error.status === 500 || error.status === 404) {\n                        this.logtxt =\n                            'No available logfile. Please note that it is not available by default, you need to set up the Spring Boot properties below! \\n' +\n                            'Please check:\\n ' +\n                            '- if the microservice is up\\n ' +\n                            '- if these properties are set: \\n ' +\n                            '    - logging.path\\n ' +\n                            '    - logging.file (to avoid using the same spring.log)\\n\\n' +\n                            'See:\\n ' +\n                            '- https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html\\n ' +\n                            '- https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html';\n                        this.updatingLogfile = false;\n                    }\n                }\n            );\n        }\n    }\n\n    scrollToBottom() {\n        this.logFileViewer.nativeElement.scrollTop = this.logFileViewer.nativeElement.scrollHeight;\n    }\n\n    scrollToTop() {\n        this.logFileViewer.nativeElement.scrollTop = this.logFileViewer.nativeElement.scrolledUp;\n    }\n\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    }\n}\n"]}]}