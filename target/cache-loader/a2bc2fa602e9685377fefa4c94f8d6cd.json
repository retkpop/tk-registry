{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/auth-session.service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/auth-session.service.ts","mtime":1564500078604},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nlet AuthSessionServerProvider = class AuthSessionServerProvider {\n    constructor(http) {\n        this.http = http;\n    }\n    login(credentials) {\n        const data = 'j_username=' +\n            encodeURIComponent(credentials.username) +\n            '&j_password=' +\n            encodeURIComponent(credentials.password) +\n            '&remember-me=' +\n            credentials.rememberMe +\n            '&submit=Login';\n        const headers = new http_1.HttpHeaders({\n            'Content-Type': 'application/x-www-form-urlencoded'\n        });\n        return this.http.post('api/authentication', data, { headers });\n    }\n    logout() {\n        // logout from the server\n        return this.http.post('api/logout', {}, { observe: 'response' }).map((response) => {\n            // to get a new csrf token call the api\n            this.http.get('api/account').subscribe(() => { }, () => { });\n            return response;\n        });\n    }\n};\nAuthSessionServerProvider = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], AuthSessionServerProvider);\nexports.AuthSessionServerProvider = AuthSessionServerProvider;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/auth-session.service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/auth-session.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAA6E;AAI7E,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IAClC,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,KAAK,CAAC,WAAW;QACb,MAAM,IAAI,GACN,aAAa;YACb,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC;YACxC,cAAc;YACd,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC;YACxC,eAAe;YACf,WAAW,CAAC,UAAU;YACtB,eAAe,CAAC;QACpB,MAAM,OAAO,GAAG,IAAI,kBAAW,CAAC;YAC5B,cAAc,EAAE,mCAAmC;SACtD,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IACnE,CAAC;IAED,MAAM;QACF,yBAAyB;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,QAA2B,EAAE,EAAE;YACjG,uCAAuC;YACvC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,GAAE,CAAC,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAC3D,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAA;AA3BY,yBAAyB;IADrC,iBAAU,EAAE;iEAEiB,iBAAU,oBAAV,iBAAU;GAD3B,yBAAyB,CA2BrC;AA3BY,8DAAyB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class AuthSessionServerProvider {\n    constructor(private http: HttpClient) {}\n\n    login(credentials): Observable<any> {\n        const data =\n            'j_username=' +\n            encodeURIComponent(credentials.username) +\n            '&j_password=' +\n            encodeURIComponent(credentials.password) +\n            '&remember-me=' +\n            credentials.rememberMe +\n            '&submit=Login';\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/x-www-form-urlencoded'\n        });\n\n        return this.http.post('api/authentication', data, { headers });\n    }\n\n    logout(): Observable<any> {\n        // logout from the server\n        return this.http.post('api/logout', {}, { observe: 'response' }).map((response: HttpResponse<any>) => {\n            // to get a new csrf token call the api\n            this.http.get('api/account').subscribe(() => {}, () => {});\n            return response;\n        });\n    }\n}\n"]}]}