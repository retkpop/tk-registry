{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/configuration/configuration.component.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/configuration/configuration.component.ts","mtime":1564500078593},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b;\nconst core_1 = require(\"@angular/core\");\nconst configuration_service_1 = require(\"./configuration.service\");\nconst shared_1 = require(\"app/shared\");\nlet JhiConfigurationComponent = class JhiConfigurationComponent {\n    constructor(configurationService, routesService) {\n        this.configurationService = configurationService;\n        this.routesService = routesService;\n        this.allConfiguration = null;\n        this.configuration = null;\n        this.configKeys = [];\n        this.filter = '';\n        this.orderProp = 'prefix';\n        this.reverse = false;\n    }\n    keys(dict) {\n        return dict === undefined ? [] : Object.keys(dict);\n    }\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe(route => {\n            this.activeRoute = route;\n            this.displayActiveRouteConfig();\n        });\n    }\n    displayActiveRouteConfig() {\n        this.updatingConfig = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.configurationService.getInstanceConfigs(this.activeRoute).subscribe(configuration => {\n                this.configuration = configuration;\n                this.updatingConfig = false;\n                for (const config of configuration) {\n                    if (config.properties !== undefined) {\n                        this.configKeys.push(Object.keys(config.properties));\n                    }\n                }\n            }, error => {\n                this.updatingConfig = false;\n                this.routesService.routeDown(this.activeRoute);\n            });\n            this.configurationService.getInstanceEnv(this.activeRoute).subscribe(configuration => {\n                this.allConfiguration = configuration;\n            });\n        }\n        else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    }\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    }\n};\nJhiConfigurationComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-configuration',\n        templateUrl: './configuration.component.html'\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof configuration_service_1.JhiConfigurationService !== \"undefined\" && configuration_service_1.JhiConfigurationService) === \"function\" ? _a : Object, typeof (_b = typeof shared_1.JhiRoutesService !== \"undefined\" && shared_1.JhiRoutesService) === \"function\" ? _b : Object])\n], JhiConfigurationComponent);\nexports.JhiConfigurationComponent = JhiConfigurationComponent;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/configuration/configuration.component.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/admin/configuration/configuration.component.ts"],"names":[],"mappings":";;;;AAAA,wCAA6D;AAG7D,mEAAkE;AAClE,uCAAqD;AAMrD,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IAYlC,YAAoB,oBAA6C,EAAU,aAA+B;QAAtF,yBAAoB,GAApB,oBAAoB,CAAyB;QAAU,kBAAa,GAAb,aAAa,CAAkB;QAX1G,qBAAgB,GAAQ,IAAI,CAAC;QAC7B,kBAAa,GAAQ,IAAI,CAAC;QAWtB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,IAAI,CAAC,IAAI;QACL,OAAO,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACnE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wBAAwB;QACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,MAAM,EAAE;YACxD,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE;gBACjF,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;gBACnC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;gBAC5B,KAAK,MAAM,MAAM,IAAI,aAAa,EAAE;oBAChC,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,EAAE;wBACjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;qBACxD;iBACJ;YACL,CAAC,EAAE,KAAK,CAAC,EAAE;gBACP,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;gBAC5B,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACnD,CAAC,CACJ,CAAC;YAEF,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE;gBACjF,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC;YAC1C,CAAC,CAAC,CAAC;SACN;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAClD;IACL,CAAC;IAED,WAAW;QACP,+CAA+C;QAC/C,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;CACJ,CAAA;AA3DY,yBAAyB;IAJrC,gBAAS,CAAC;QACP,QAAQ,EAAE,mBAAmB;QAC7B,WAAW,EAAE,gCAAgC;KAChD,CAAC;iEAa4C,+CAAuB,oBAAvB,+CAAuB,oDAAyB,yBAAgB,oBAAhB,yBAAgB;GAZjG,yBAAyB,CA2DrC;AA3DY,8DAAyB","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { JhiConfigurationService } from './configuration.service';\nimport { JhiRoutesService, Route } from 'app/shared';\n\n@Component({\n    selector: 'jhi-configuration',\n    templateUrl: './configuration.component.html'\n})\nexport class JhiConfigurationComponent implements OnInit, OnDestroy {\n    allConfiguration: any = null;\n    configuration: any = null;\n    configKeys: any[];\n    filter: string;\n    orderProp: string;\n    reverse: boolean;\n\n    activeRoute: Route;\n    subscription: Subscription;\n    updatingConfig: boolean;\n\n    constructor(private configurationService: JhiConfigurationService, private routesService: JhiRoutesService) {\n        this.configKeys = [];\n        this.filter = '';\n        this.orderProp = 'prefix';\n        this.reverse = false;\n    }\n\n    keys(dict): Array<string> {\n        return dict === undefined ? [] : Object.keys(dict);\n    }\n\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe(route => {\n            this.activeRoute = route;\n            this.displayActiveRouteConfig();\n        });\n    }\n\n    displayActiveRouteConfig() {\n        this.updatingConfig = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.configurationService.getInstanceConfigs(this.activeRoute).subscribe(configuration => {\n                    this.configuration = configuration;\n                    this.updatingConfig = false;\n                    for (const config of configuration) {\n                        if (config.properties !== undefined) {\n                            this.configKeys.push(Object.keys(config.properties));\n                        }\n                    }\n                }, error => {\n                    this.updatingConfig = false;\n                    this.routesService.routeDown(this.activeRoute);\n                }\n            );\n\n            this.configurationService.getInstanceEnv(this.activeRoute).subscribe(configuration => {\n                this.allConfiguration = configuration;\n            });\n        } else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    }\n\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    }\n}\n"]}]}