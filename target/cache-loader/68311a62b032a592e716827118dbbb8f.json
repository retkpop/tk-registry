{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/user-route-access-service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/user-route-access-service.ts","mtime":1564500078605},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d;\nconst core_1 = require(\"@angular/core\");\nconst router_1 = require(\"@angular/router\");\nconst shared_1 = require(\"app/shared\");\nconst login_modal_service_1 = require(\"app/core/login/login-modal.service\");\nconst state_storage_service_1 = require(\"./state-storage.service\");\nlet UserRouteAccessService = class UserRouteAccessService {\n    constructor(router, loginModalService, principal, stateStorageService) {\n        this.router = router;\n        this.loginModalService = loginModalService;\n        this.principal = principal;\n        this.stateStorageService = stateStorageService;\n    }\n    canActivate(route, state) {\n        const authorities = route.data['authorities'];\n        if (!authorities || authorities.length === 0) {\n            return true;\n        }\n        return this.checkLogin(authorities, state.url);\n    }\n    checkLogin(authorities, url) {\n        const principal = this.principal;\n        return Promise.resolve(principal.identity().then(account => {\n            if (account && principal.hasAnyAuthorityDirect(authorities)) {\n                return true;\n            }\n            this.stateStorageService.storeUrl(url);\n            this.router.navigate(['accessdenied']).then(() => {\n                // only show the login dialog, if the user hasn't logged in yet\n                if (!account) {\n                    this.loginModalService.open();\n                }\n            });\n            return false;\n        }));\n    }\n};\nUserRouteAccessService = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _a : Object, typeof (_b = typeof login_modal_service_1.LoginModalService !== \"undefined\" && login_modal_service_1.LoginModalService) === \"function\" ? _b : Object, typeof (_c = typeof shared_1.Principal !== \"undefined\" && shared_1.Principal) === \"function\" ? _c : Object, typeof (_d = typeof state_storage_service_1.StateStorageService !== \"undefined\" && state_storage_service_1.StateStorageService) === \"function\" ? _d : Object])\n], UserRouteAccessService);\nexports.UserRouteAccessService = UserRouteAccessService;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/user-route-access-service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/core/auth/user-route-access-service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,4CAAmG;AAEnG,uCAAuC;AACvC,4EAAuE;AACvE,mEAA8D;AAG9D,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IAC/B,YACY,MAAc,EACd,iBAAoC,EACpC,SAAoB,EACpB,mBAAwC;QAHxC,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,cAAS,GAAT,SAAS,CAAW;QACpB,wBAAmB,GAAnB,mBAAmB,CAAqB;IACjD,CAAC;IAEJ,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACjE,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1C,OAAO,IAAI,CAAC;SACf;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IACnD,CAAC;IAED,UAAU,CAAC,WAAqB,EAAE,GAAW;QACzC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,OAAO,OAAO,CAAC,OAAO,CAClB,SAAS,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAChC,IAAI,OAAO,IAAI,SAAS,CAAC,qBAAqB,CAAC,WAAW,CAAC,EAAE;gBACzD,OAAO,IAAI,CAAC;aACf;YAED,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC7C,+DAA+D;gBAC/D,IAAI,CAAC,OAAO,EAAE;oBACV,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;iBACjC;YACL,CAAC,CAAC,CAAC;YACH,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,CACL,CAAC;IACN,CAAC;CACJ,CAAA;AApCY,sBAAsB;IADlC,iBAAU,EAAE;iEAGW,eAAM,oBAAN,eAAM,oDACK,uCAAiB,oBAAjB,uCAAiB,oDACzB,kBAAS,oBAAT,kBAAS,oDACC,2CAAmB,oBAAnB,2CAAmB;GAL3C,sBAAsB,CAoClC;AApCY,wDAAsB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { Principal } from 'app/shared';\nimport { LoginModalService } from 'app/core/login/login-modal.service';\nimport { StateStorageService } from './state-storage.service';\n\n@Injectable()\nexport class UserRouteAccessService implements CanActivate {\n    constructor(\n        private router: Router,\n        private loginModalService: LoginModalService,\n        private principal: Principal,\n        private stateStorageService: StateStorageService\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\n        const authorities = route.data['authorities'];\n        if (!authorities || authorities.length === 0) {\n            return true;\n        }\n\n        return this.checkLogin(authorities, state.url);\n    }\n\n    checkLogin(authorities: string[], url: string): Promise<boolean> {\n        const principal = this.principal;\n        return Promise.resolve(\n            principal.identity().then(account => {\n                if (account && principal.hasAnyAuthorityDirect(authorities)) {\n                    return true;\n                }\n\n                this.stateStorageService.storeUrl(url);\n                this.router.navigate(['accessdenied']).then(() => {\n                    // only show the login dialog, if the user hasn't logged in yet\n                    if (!account) {\n                        this.loginModalService.open();\n                    }\n                });\n                return false;\n            })\n        );\n    }\n}\n"]}]}