{"remainingRequest":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js??ref--9-3!/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/refresh/refresh.service.ts","dependencies":[{"path":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/refresh/refresh.service.ts","mtime":1564500078628},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst Subject_1 = require(\"rxjs/Subject\");\nconst ngx_webstorage_1 = require(\"ngx-webstorage\");\nlet JhiRefreshService = class JhiRefreshService {\n    constructor(sessionStorage) {\n        this.sessionStorage = sessionStorage;\n        // Observable sources\n        this.refreshChangedSource = new Subject_1.Subject();\n        this.refreshReloadSource = new Subject_1.Subject();\n        this.refreshChanged$ = this.refreshChangedSource.asObservable();\n        this.refreshReload$ = this.refreshReloadSource.asObservable();\n    }\n    refreshChanged() {\n        this.refreshChangedSource.next();\n    }\n    refreshReload() {\n        this.refreshReloadSource.next();\n    }\n    getSelectedRefreshTime() {\n        return this.sessionStorage.retrieve('refreshTime');\n    }\n    storeSelectedRefreshTime(time) {\n        this.sessionStorage.store('refreshTime', time);\n    }\n};\nJhiRefreshService = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _a : Object])\n], JhiRefreshService);\nexports.JhiRefreshService = JhiRefreshService;\n",{"version":3,"file":"/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/refresh/refresh.service.ts","sourceRoot":"","sources":["/Volumes/TamKieu/java/tk-registry/node_modules/angular-router-loader/src/index.js!/Volumes/TamKieu/java/tk-registry/node_modules/tslint-loader/index.js!/Volumes/TamKieu/java/tk-registry/src/main/webapp/app/shared/refresh/refresh.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAE3C,0CAAuC;AACvC,mDAAuD;AAGvD,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAO1B,YAAoB,cAAqC;QAArC,mBAAc,GAAd,cAAc,CAAuB;QANzD,qBAAqB;QACb,yBAAoB,GAAG,IAAI,iBAAO,EAAO,CAAC;QAC1C,wBAAmB,GAAG,IAAI,iBAAO,EAAO,CAAC;QAK7C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC;QAChE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;IAClE,CAAC;IAED,cAAc;QACV,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;IACrC,CAAC;IAED,aAAa;QACT,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;IACpC,CAAC;IAED,sBAAsB;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACvD,CAAC;IAED,wBAAwB,CAAC,IAAY;QACjC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;CACJ,CAAA;AA3BY,iBAAiB;IAD7B,iBAAU,EAAE;iEAQ2B,sCAAqB,oBAArB,sCAAqB;GAPhD,iBAAiB,CA2B7B;AA3BY,8CAAiB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { SessionStorageService } from 'ngx-webstorage';\n\n@Injectable()\nexport class JhiRefreshService {\n    // Observable sources\n    private refreshChangedSource = new Subject<any>();\n    private refreshReloadSource = new Subject<any>();\n    refreshChanged$: Observable<any>;\n    refreshReload$: Observable<any>;\n\n    constructor(private sessionStorage: SessionStorageService) {\n        this.refreshChanged$ = this.refreshChangedSource.asObservable();\n        this.refreshReload$ = this.refreshReloadSource.asObservable();\n    }\n\n    refreshChanged() {\n        this.refreshChangedSource.next();\n    }\n\n    refreshReload() {\n        this.refreshReloadSource.next();\n    }\n\n    getSelectedRefreshTime(): number {\n        return this.sessionStorage.retrieve('refreshTime');\n    }\n\n    storeSelectedRefreshTime(time: number) {\n        this.sessionStorage.store('refreshTime', time);\n    }\n}\n"]}]}